[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "trinetri_auto"
version = "0.1.0"
description = "Friction-less, everything-tracked observability and in-trace evaluation for multi-agent LLM workflows"
readme = "README.md"
license = { text = "Apache-2.0" }
authors = [
    { name = "Trinetri Authors" },
]
keywords = [
    "observability",
    "opentelemetry",
    "langgraph",
    "crewai",
    "llm",
    "agents",
    "evaluation",
    "deepeval",
    "mcp",
    "anthropic",
    "openai",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",

    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
]
requires-python = ">=3.10"
dependencies = [
    "opentelemetry-api>=1.34.0",
    "opentelemetry-sdk>=1.34.0",
    "opentelemetry-exporter-otlp>=1.34.0",
    "opentelemetry-instrumentation>=0.45b0",
    "opentelemetry-instrumentation-httpx>=0.45b0",
    "opentelemetry-instrumentation-requests>=0.45b0",
    "pydantic>=2.0",
    "httpx>=0.24.0",
    "typing-extensions>=4.0.0",
    "click>=8.0.0",
]

[project.scripts]
trinetri = "trinetri_auto.cli:cli"

[project.optional-dependencies]
langgraph = [
    "langgraph>=0.4.8",
]
crewai = [
    "crewai>=0.30.0",
]
deepeval = [
    "deepeval>=3.1.7",
]
anthropic = [
    "anthropic>=0.25.0",
]
openai = [
    "openai>=1.30.0",
]
all = [
    "trinetri_auto[langgraph,crewai,deepeval,anthropic,openai]",
]
frameworks = [
    "trinetri_auto[langgraph,crewai,deepeval,anthropic,openai]",
]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "ruff>=0.1.0",
    "mypy>=1.5",
    "pre-commit>=3.0",
    "twine>=4.0.0",
    "safety>=2.0.0",
    "bandit>=1.7.0",
    "build>=0.10.0",
]

[project.urls]
Homepage = "https://github.com/trinetri/trinetri"
Repository = "https://github.com/trinetri/trinetri.git"
Documentation = "https://trinetri.readthedocs.io"
Changelog = "https://github.com/trinetri/trinetri/blob/main/CHANGELOG.md"

[dependency-groups]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "ruff>=0.1.0",
    "mypy>=1.5",
    "pre-commit>=3.0",
    "twine>=4.0.0",
    "safety>=2.0.0",
    "bandit>=1.7.0",
    "build>=0.10.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src/trinetri_auto"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/deploy",
    "/extras",
    "/adr",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B018"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src/trinetri_auto"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
